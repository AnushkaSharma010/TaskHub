package com.project_task_hub.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project_task_hub.entity.Comments;
import com.project_task_hub.entity.Issues;
import com.project_task_hub.entity.User;
import com.project_task_hub.repository.UserRepository;
import com.project_task_hub.request.CreateCommentRequest;
import com.project_task_hub.response.MessageResponse;
import com.project_task_hub.service.CommentService;
import com.project_task_hub.service.UserService;

@RestController
@RequestMapping("/comment")
public class CommentController {
	
	@Autowired
	private CommentService commentService;
	
	@Autowired
	private UserService userService;
	
	@PostMapping("/")
	public ResponseEntity<Comments> createComment(@RequestBody CreateCommentRequest req,
			@RequestHeader("Autherization") String jwt)throws Exception{
		User user = userService.findUserProfileByJwt(jwt);
		Comments comment = commentService.createComment(req.getIssueId(), user.getId(), req.getContent());
		return new ResponseEntity<Comments>(comment,HttpStatus.CREATED);
	}
	
	@DeleteMapping("{commentId}")
	public ResponseEntity<MessageResponse> deleteComment(@PathVariable Long commentId,
			@RequestHeader("Autherization") String jwt) throws Exception{
		
		User user = userService.findUserProfileByJwt(jwt);
		commentService.deleteComment(commentId, user.getId());
		MessageResponse res = new MessageResponse();
		res.setMessage("comment deleted successfully..");
		return new ResponseEntity<MessageResponse>(res,HttpStatus.OK);
	}
	
	@GetMapping("{issueId}")
	public ResponseEntity<List<Comments>> getCommentsByIssueId(@PathVariable Long issueId, @RequestHeader("Autherization") String jwt) throws Exception{
		List<Comments> comments =commentService.findCommentsByIssueId(issueId);
		return new ResponseEntity<List<Comments>>(comments,HttpStatus.OK);
	}

}
