package com.project_task_hub.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.project_task_hub.entity.Chat;
import com.project_task_hub.entity.Project;
import com.project_task_hub.entity.User;
import com.project_task_hub.repository.ProjectRepository;
import com.project_task_hub.repository.UserRepository;

@Service
@Transactional

public class ProjectServiceImpl implements ProjectService{
	
	@Autowired
	private ProjectRepository projectRepository;
	
	@Autowired
	private UserService userService;

	@Autowired
	private ChatService chatService;
	
	
	@Override
	public Project createProject(Project project, User user) throws Exception {
		Project newProject = new Project();
		newProject.setOwner(user);
		newProject.setCategory(project.getCategory());
		newProject.setDescription(project.getDescription());
		newProject.setName(project.getName());
		newProject.setTags(project.getTags());
		newProject.getTeam().add(user);
		
		Project saveProject = projectRepository.save(newProject);
		
		Chat chat = new Chat();
	    chat.setProject(saveProject);
	    
	    Chat projectChat = chatService.createChat(chat);
	    saveProject.setChat(projectChat);
	    
		
		return saveProject;
	}

	@Override
	public void deleteProject(Long projectId, Long userId) throws Exception {
		projectRepository.deleteById(projectId);
		System.out.print("project is deleted with id "+ projectId);
		
	}

	@Override
	public Project updateProject(Project updateProject, Long userId) throws Exception {
		Project project = getProjectById(userId);
		project.setCategory(updateProject.getCategory());
		project.setDescription(updateProject.getDescription());
		project.setName(updateProject.getName());
		project.setTags(updateProject.getTags());
		
		return project;
	}

	@Override
	public void addUserToProject(Long projectId, Long userId) throws Exception {
		Project project = getProjectById(projectId);
		User user = userService.findUserById(userId);
		if(! project.getTeam().contains(user)) {
			project.getTeam().add(user);
			project.getChat().getUsers().add(user);
		}
		projectRepository.save(project);
	}

	@Override
	public void removeUserFromProject(Long projectId, Long userId) throws Exception {
		Project project = getProjectById(projectId);
		User user = userService.findUserById(userId);
		if( project.getTeam().contains(user)) {
			project.getTeam().remove(user);
			project.getChat().getUsers().remove(user);
		}
		projectRepository.save(project);
	
		
	}

	@Override
	public Project getProjectById(Long projectId) throws Exception {
		Optional<Project> opProject = projectRepository.findById(projectId);
		if(opProject.isEmpty() ) {
		   throw new Exception("Project not found with " + projectId +"id");
		}
		return opProject.get();
	}

	@Override
	public List<Project> getProjectByTeam(User user, String category, String tag) throws Exception {
		List<Project> projects = projectRepository.findByTeamContainingOrOwner(user, user);
		if(category != null) {
			projects = projects.stream().filter(project -> project.getCategory().equals(category)).collect(Collectors.toList());
		}
		if(tag != null) {
			projects = projects.stream().filter(project -> project.getTags().contains(tag)).collect(Collectors.toList());
		}
		
		return projects;
	}

	@Override
	public Chat getChatByProjectId(Long projectId) throws Exception {
		Project project = getProjectById(projectId);
		return project.getChat();
	}

	@Override
	public List<Project> searchProjects(String keyword, User user) throws Exception {
		String partialName = "%" + keyword+ "%";
		List<Project> project = projectRepository.findByNameContainingAndTeamContaining(partialName, user);
		return project;
	}
	

}
