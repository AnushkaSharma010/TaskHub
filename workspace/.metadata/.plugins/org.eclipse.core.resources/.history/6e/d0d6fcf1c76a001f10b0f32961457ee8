package com.project_task_hub.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.project_task_hub.entity.Chat;
import com.project_task_hub.entity.Invitation;
import com.project_task_hub.entity.InviteRequest;
import com.project_task_hub.entity.Project;
import com.project_task_hub.entity.User;
import com.project_task_hub.response.MessageResponse;
import com.project_task_hub.service.InvitationService;
import com.project_task_hub.service.ProjectService;
import com.project_task_hub.service.UserService;

@RestController
@RequestMapping("api/project")
public class ProjectController {
	@Autowired
	private ProjectService projectService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private InvitationService invitationService;
	
    @GetMapping("/")
	public ResponseEntity<List<Project>> getProjects (@RequestParam(required = false) String category , @RequestParam(required = false) String tag, @RequestHeader("Authorization") String jwt) throws Exception {

		User user = userService.findUserProfileByJwt(jwt);
		List<Project> projects = projectService.getProjectByTeam(user, category, tag);
		
		return new ResponseEntity<List<Project>>(projects, HttpStatus.OK);
	}
    
    @GetMapping("/{projectId}")
    public ResponseEntity<Project> getProjectById(@PathVariable Long projectId, @RequestHeader("Authorization") String jwt) throws Exception {
		
    	User user = userService.findUserProfileByJwt(jwt);
    	Project project = projectService.getProjectById(projectId);
    	
    	return new ResponseEntity<Project>(project, HttpStatus.OK);
	}
    
    @PostMapping("/")
    public ResponseEntity<Project> createProject(@RequestHeader("Authorization") String jwt, @RequestBody Project project) throws Exception{
    	
    	User user = userService.findUserProfileByJwt(jwt);
    	Project createProject = projectService.createProject(project, user);
    	if(createProject== null) {
    		throw new Exception("error in creating new project for user: "+user.getFullName());
    	}
    	
    	return new ResponseEntity<Project>(createProject, HttpStatus.CREATED);
    }
    
    
    @PatchMapping("/{projectId}")
    public ResponseEntity<Project> updateProject(@RequestHeader("Authorization") String jwt, @RequestBody Project project , @PathVariable Long projectId) throws Exception{
    	
    	User user = userService.findUserProfileByJwt(jwt);
    	Project updateProject = projectService.updateProject(project,projectId);
    	
    	return new ResponseEntity<Project>(updateProject, HttpStatus.OK);
    }
    
    @DeleteMapping("/{projectId}")
    public ResponseEntity<MessageResponse> deleteProject(@RequestHeader("Authorization") String jwt , @PathVariable Long projectId) throws Exception{
    	
    	User user = userService.findUserProfileByJwt(jwt);
    	projectService.deleteProject(projectId, user.getId());
    	
    	MessageResponse message = new MessageResponse();
    	message.setMessage("Project Deleted Successfully..");
    	
    	return new ResponseEntity<MessageResponse>(message, HttpStatus.OK);
    }
    
    @GetMapping("/search")
   	public ResponseEntity<List<Project>> searchProjects (@RequestParam(required = false) String keyword ,  @RequestHeader("Authorization") String jwt) throws Exception {

   		User user = userService.findUserProfileByJwt(jwt);
   		List<Project> projects = projectService.searchProjects(keyword, user);
   		
   		return new ResponseEntity<List<Project>>(projects, HttpStatus.OK);
   	}
    
    @GetMapping("/{projectId}/chat")
    public ResponseEntity<Chat> getChatByProjectId(@PathVariable Long projectId, @RequestHeader("Authorization") String jwt) throws Exception {
		
    	User user = userService.findUserProfileByJwt(jwt);
    	Chat chat = projectService.getChatByProjectId(projectId);
    	
    	return new ResponseEntity<Chat>(chat, HttpStatus.OK);
	}
    
    @PostMapping("/invite")
    public ResponseEntity<MessageResponse> inviteProject(@RequestHeader("Authorization") String jwt, @RequestBody Project project, @RequestBody InviteRequest req) throws Exception{
    	
    	User user = userService.findUserProfileByJwt(jwt);
    	invitationService.sendInvitation(req.getEmail(),req.getProjectId());
    	MessageResponse msg = new MessageResponse();
    	msg.setMessage("User Invitation sent ");
    	return new ResponseEntity<MessageResponse>(msg, HttpStatus.CREATED);
    }
    
    @GetMapping("/accept_invite")
    public ResponseEntity<Invitation> acceptInviteProject( @RequestParam String token , @RequestHeader("Authorization") String jwt, @RequestBody Project project) throws Exception{
    	
    	User user = userService.findUserProfileByJwt(jwt);
    	Invitation invite = invitationService.acceptInvitation(token, user.getId()); 
    	projectService.addUserToProject(invite.getProjectID(), user.getId());
    	return new ResponseEntity<Invitation>(invite, HttpStatus.ACCEPTED);
    }
    
}
